plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.1.1"
    id("io.micronaut.aot") version "4.1.1"
    id("nu.studer.jooq") version "8.2.1"
    id("org.flywaydb.flyway") version "9.22.1"
    id("com.avast.gradle.docker-compose") version "0.17.5"
}

version = "0.1"
group = "mmorpg_auth"

repositories {
    mavenCentral()
}

def dbDriver = System.getenv('DATABASE_DRIVER') ?: 'org.postgresql.Driver'
def dbUser = System.getenv('DATABASE_USER') ?: 'mmorpg_auth'
def dbPassword = System.getenv('DATABASE_PASSWORD') ?: '123'
def dbHost = System.getenv('DATABASE_HOST') ?: '127.0.0.1'
def dbPort = System.getenv('DATABASE_PORT') ?: 5432
def dbName = System.getenv('DATABASE_NAME') ?: 'mmorpg_auth'
def dbUrl = System.getenv('DATABASE_URL') ?: "jdbc:postgresql://$dbHost:$dbPort/$dbName"

jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = dbDriver
                    url = dbUrl
                    user = dbUser
                    password = dbPassword
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        fluentSetters = true
                        validationAnnotations = true
                        jpaAnnotations = true
                        pojos = true
                        daos = true
                    }
                    target {
                        packageName = 'com.org.mmorpg_auth.repository.model'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

task migratePrimaryDB(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    locations = ['filesystem:src/main/resources/db/postgres/']
    url = dbUrl
    user = dbUser
    password = dbPassword
    baselineOnMigrate = true
    validateOnMigrate = false
}

tasks.generateJooq.mustRunAfter(tasks.migratePrimaryDB)
tasks.compileJava.dependsOn(tasks.migratePrimaryDB)
tasks.migratePrimaryDB.dependsOn(tasks.composeUp)

dependencies {
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    //implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.reactor:micronaut-reactor")
    compileOnly("org.graalvm.nativeimage:svm")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.yaml:snakeyaml")
    annotationProcessor("io.micronaut.data:micronaut-data-processor:4.1.3")

    implementation("io.reactivex.rxjava3:rxjava:3.1.8")

    // Lombok
    compileOnly('org.projectlombok:lombok:1.18.30')
    annotationProcessor('org.projectlombok:lombok:1.18.30')

    // Micronaut inject
    implementation(platform("io.micronaut:micronaut-bom:3.10.1"))
    annotationProcessor(platform("io.micronaut:micronaut-bom:3.10.1"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    implementation("io.micronaut:micronaut-inject")

    // database configs
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    jooqGenerator('org.postgresql:postgresql:42.6.0')
    implementation('org.postgresql:postgresql:42.6.0')
    implementation("jakarta.validation:jakarta.validation-api:3.0.2")
    implementation("jakarta.persistence:jakarta.persistence-api:3.1.0")

    // security
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("org.springframework.security:spring-security-crypto:6.1.4")

    // transactional annotation
    implementation("io.micronaut.spring:micronaut-spring")

    testImplementation("io.micronaut:micronaut-http-client")
}

application {
    mainClass.set("server.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("mmorpg_auth.*")
    }
    aot {
    // Please review carefully the optimizations enabled below
    // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
    }
}

dockerCompose {
    useComposeFiles = ['./docker-compose.yml']
    stopContainers = true
    tcpPortsToIgnoreWhenWaiting = [5005]
}

graalvmNative {
    binaries {
        main {
            imageName.set('mn-graalvm-application')
            buildArgs.add('--verbose')
        }
    }
}
